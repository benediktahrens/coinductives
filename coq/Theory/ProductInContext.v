Require Import Theory.Category.
Require Import Theory.Functor.
Require Import Theory.Isomorphism.
Require Import Theory.RelativeComonad.
Require Import Theory.RelativeComonadWithCut.
Require Import Theory.Comodule.
Require Import Theory.Product.
Require Import Theory.StrongMonoidal.

Generalizable All Variables.
Set Implicit Arguments.
Unset Strict Implicit.

(*------------------------------------------------------------------------------
  -- Ôº≤Ôº•Ôº¨Ôº°Ôº¥Ôº©Ôº∂Ôº•  Ôº£ÔºØÔº≠ÔºØÔºÆÔº°Ôº§  Ôº§Ôº•Ôº¶Ôº©ÔºÆÔº©Ôº¥Ôº©ÔºØÔºÆ  Ôº∑Ôº©Ôº¥Ôº®  Ôº£ÔºµÔº¥
  ----------------------------------------------------------------------------*)

(*------------------------------------------------------------------------------
  -- Ôº∞Ôº≤ÔºØÔº§ÔºµÔº£Ôº¥  Ôº©ÔºÆ  Ôº£ÔºØÔºÆÔº¥Ôº•Ôº∏Ôº¥
  ----------------------------------------------------------------------------*)

Section ProductInContext.

  Context `{BinaryProduct ùíû} `{BinaryProduct ùíü} (F : Functor ùíû  ùíü)
          (E : ùíû) `{!CartesianStrongMonoidal F} (T : RelativeComonadWithCut F E)
          (‚Ñ∞ : Category) (M : Comodule T ‚Ñ∞).

  Program Definition product_in_context : Comodule T ‚Ñ∞ :=
    Comodule.make (Œª C ‚àô M (E √ó C)) ( Œª A B ‚àô Œª f ‚Ü¶ M‚ãÖmcobind (extend(f))).
  Next Obligation.
    intros f g eq_fg. now rewrite eq_fg.
  Qed.
  Next Obligation.
    rewrite cut_counit. rewrite <- ‚àò-√ó. rewrite <- compose_assoc. rewrite iso_right.
    rewrite left_id. rewrite mcobind_counit. reflexivity.
  Qed.
  Next Obligation.
    rewrite mcobind_compose. apply Œ†_cong. repeat rewrite compose_assoc.
    rewrite ‚àò-√ó. rewrite cut_cobind. unfold Extend. simpl.
    repeat rewrite compose_assoc. rewrite counit_cobind.
    assert (eq_œÄ‚ÇÅ : ‚àÄ A B : ùíû, F ‚ãÖ œÄ‚ÇÅ[A , B] ‚àò œÜ‚Åª¬π ‚âà œÄ‚ÇÅ).
    {
      intros A B. assert (eq_F : F ‚ãÖ œÄ‚ÇÅ[A , B] ‚âà œÄ‚ÇÅ ‚àò œÜ). unfold œÜ. now rewrite œÄ‚ÇÅ_compose.
      rewrite eq_F. rewrite compose_assoc. rewrite iso_left. now rewrite right_id.
    }
    repeat rewrite <- compose_assoc. rewrite eq_œÄ‚ÇÅ. rewrite œÄ‚ÇÅ_compose. reflexivity.
  Qed.

End ProductInContext.

Arguments product_in_context {_ _ _ _ _} _ {_ _ _} _.

Require Import Category.RComod.

Section Morphisms.

  Context `{BinaryProduct ùíû} `{BinaryProduct ùíü} (F : Functor ùíû  ùíü)
          (E : ùíû) `{!CartesianStrongMonoidal F} (T : RelativeComonadWithCut F E)
          (‚Ñ∞ : Category) (M : Comodule T ‚Ñ∞) (N : Comodule T ‚Ñ∞) (Œ± : M ‚áí N).

  Program Definition product_in_context_mor : product_in_context E M ‚áí product_in_context E N :=
    Comodule.Morphism.make (Œª A ‚àô Œ± (E √ó A)).
  Next Obligation.
    now rewrite Œ±_commutes.
  Qed.

End Morphisms.