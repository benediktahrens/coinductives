(*----------------------------------------------------------------------------*)
(*    Category of Comodules over Relative Comonads                            *)
(*----------------------------------------------------------------------------*)

Require Import Theory.Category.
Require Import Theory.Functor.
Require Import Theory.RelativeComonad.
Require Import Theory.Comodule.

Generalizable All Variables.

(*
 * Raw category
 *)

Section category_def.

  Context `{F : Functor ùíû ùíü} (T : RelativeComonad F) (‚Ñ∞ : Category).

  Notation RComod := (ComoduleRC T ‚Ñ∞).

  Definition Id (M : RComod) : M ‚üπ M.
    constructor 1 with {| M_mor := Œª C ‚àô id[ M C ] |}.
    abstract (
      intros C D f; simpl; rewrite left_id, right_id; reflexivity
    ).
  Defined.

  Definition Compose (M N P : RComod) (f : N ‚üπ P) (g : M ‚üπ N) : M ‚üπ P.
    constructor 1 with {| M_mor := Œª C ‚àô (f C) ‚àò (g C) |}.
    abstract (
      intros C D h; simpl;
      rewrite <- compose_assoc; rewrite <- M_mor_commutes;
      rewrite compose_assoc; rewrite M_mor_commutes; rewrite compose_assoc;
      reflexivity
    ).
  Defined.

  Definition Eq (M N : RComod) (f g : M ‚üπ N) : Prop := ‚àÄ (C : ùíû), f C ‚âà·∂ú g C.

  Definition rcomod : category :=
  {| Obj     := RComod
   ; Hom     := _‚üπ_
   ; id      := Id
   ; compose := Compose
   ; Hom_eq  := Eq |}.

End category_def.

(*
 * IsCategory
 *)
Definition rcomod_IsCategory `{F : Functor ùíû ùíü} {T : RelativeComonad F} {‚Ñ∞ : Category} : IsCategory (rcomod T ‚Ñ∞).
Proof. constructor.
  - (* Hom_eq_equivalence *)
    intros M N. constructor; hnf; simpl.
    + (* reflexivity *)
      intros f C. reflexivity.
    + (* symmetry *)
      intros f g eq_sym C. symmetry. apply eq_sym.
    + (* transitivity *)
      intros f g h eq_fg eq_gh C. etransitivity. apply eq_fg. apply eq_gh.
  - (* left_id *)
    intros M N f C. simpl. rewrite left_id. reflexivity.
  - (* right_id *)
    intros M N f C. simpl. rewrite right_id. reflexivity.
  - (* assoc *)
    intros M N P Q h g f C; simpl. rewrite compose_assoc. reflexivity.
  - (* compose_cong *)
    intros M N P f‚ÇÅ f‚ÇÇ eq_f‚ÇÅf‚ÇÇ g‚ÇÅ g‚ÇÇ eq_g‚ÇÅg‚ÇÇ C. simpl.
    rewrite (eq_f‚ÇÅf‚ÇÇ C), (eq_g‚ÇÅg‚ÇÇ C). reflexivity.
Qed.

Definition ùëπùë™ùíêùíéùíêùíÖ `{F : Functor ùíû ùíü} (T : RelativeComonad F) (‚Ñ∞ : Category) : Category :=
  {| _category := rcomod T ‚Ñ∞
   ; isCategory := rcomod_IsCategory |}.