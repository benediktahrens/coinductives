(*----------------------------------------------------------------------------*)
(*    Category of setoids                                                     *)
(*----------------------------------------------------------------------------*)

Require Import Theory.Category.

(*
 * Objects & Morphisms
 *)

Structure SetoidType : Type :=
  { Carrier        :> Type
  ; Carrier_setoid : Setoid Carrier }.

Existing Instance Carrier_setoid.

Structure Setoid_Hom (S‚ÇÅ S‚ÇÇ : SetoidType) : Type :=
  { setoid_hom :> S‚ÇÅ ‚Üí S‚ÇÇ
  ; setoid_hom_cong : setoid_hom Preserves _‚âà_ ‚ü∂ _‚âà_ }.

Arguments setoid_hom_cong {_} {_} _ _ _ _.

Existing Instance setoid_hom_cong.

Notation "_‚ü∂_" := (Setoid_Hom).
Infix "‚ü∂" := Setoid_Hom (at level 70).

(*
 * Trivial Setoid on a type
 *)
Definition FreeSetoid (A : Type) : SetoidType :=
  {| Carrier := A
   ; Carrier_setoid := {| equiv := eq |} |}.

(*
 * Setoid_Hom is a Setoid
 *)
Program Definition SS (S‚ÇÅ S‚ÇÇ : SetoidType) : SetoidType :=
  {| Carrier := S‚ÇÅ ‚ü∂ S‚ÇÇ
   ; Carrier_setoid := {| equiv := Œª f g ‚àô ‚àÄ {x y}, x ‚âà y ‚Üí f x ‚âà g y |} |}.
Next Obligation. constructor.
  + (* reflexivity *)
    hnf. intros f x y eq_xy. rewrite eq_xy; reflexivity.
  + (* symmetry *)
    hnf. intros f g eq_fg x y eq_xy. symmetry in eq_xy; symmetry.
    rewrite eq_fg; eauto.
    reflexivity.
  + (* transitivity *)
    hnf. intros f g h eq_fg eq_gh x y eq_xy.
    etransitivity. apply (eq_fg _ _ eq_xy). apply eq_gh.
    reflexivity.
Defined.

(*----------------------------------------------------------------------------*)

Definition Id (A : SetoidType) : A ‚ü∂ A :=
  {| setoid_hom      := Œª x ‚àô x
   ; setoid_hom_cong := Œª _ _ x ‚àô x |}.

Program Definition Compose (A B C : SetoidType) (g : B ‚ü∂ C) (f : A ‚ü∂ B) : A ‚ü∂ C :=
  {| setoid_hom := Œª x ‚àô g (f x) |}.
Next Obligation.
  intros x y eq_xy. now rewrite eq_xy.
Defined.

(*----------------------------------------------------------------------------*)

(*
 * RawCategory
 *)
Definition Setoid_category : category :=
  {| Obj     := SetoidType
   ; Hom     := _‚ü∂_
   ; id      := Id
   ; compose := Compose
   ; Hom_eq  := Œª A B f‚ÇÅ f‚ÇÇ ‚àô ‚àÄ x y, x ‚âà y ‚Üí f‚ÇÅ x ‚âà f‚ÇÇ y |}.

(*
 * IsCategory
 *)
Definition Setoid_IsCategory : IsCategory Setoid_category.
Proof. constructor.
  - (* Hom_eq_Equivalence *)
    intros A B; constructor; hnf ; simpl.
    + (* Reflexivity *)
      intros f x y eq_xy. rewrite eq_xy; reflexivity.
    + (* symmetry *)
      intros f g eq_fg x y eq_xy.
      symmetry; apply eq_fg. now symmetry.
    + (* transitivity *)
      intros f g h eq_fg eq_gh x y eq_xy.
      etransitivity; eauto. apply eq_gh. reflexivity.
  - (* left_id *)
    eapply @setoid_hom_cong; eauto.
  - (* right_id *)
    eapply @setoid_hom_cong; eauto.
  - (* assoc *)
    simpl. intros A B C D h g f x y eq_xy; rewrite eq_xy; reflexivity.
  - (* compose_cong *)
    intros A B C f‚ÇÅ f‚ÇÇ eq_f‚ÇÅf‚ÇÇ g‚ÇÅ g‚ÇÇ eq_g‚ÇÅg‚ÇÇ x y eq_xy; simpl in *.
    now rewrite eq_xy, eq_g‚ÇÅg‚ÇÇ, eq_f‚ÇÅf‚ÇÇ.
Qed.

Definition ùë∫ùíÜùíïùíêùíäùíÖ : Category :=
  {| _category := Setoid_category
   ; isCategory  := Setoid_IsCategory |}.
